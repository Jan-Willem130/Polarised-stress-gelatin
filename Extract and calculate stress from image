% Define parameters
clear all
close all
I0 = 255;       % Maximum detected light intensity
h = 0.025;      % Material thickness (in meters)
f_sigma = 625; % Material fringe value
block_size = 10; % Size of each block in pixels

% Load the image (replace 'yo.jpg' with your image file path)
img = imread('your image');
img_gray = double(rgb2gray(img)); % Convert to grayscale and double precision
[rows, cols] = size(img_gray);

% Initialize arrays for estimated principal stresses
sigma1_est = zeros(rows, cols);
sigma2_est = zeros(rows, cols);

% Process the image in blocks
for r = 1:block_size:rows
    for c = 1:block_size:cols
        % Define the current block indices
        r_end = min(r + block_size - 1, rows);
        c_end = min(c + block_size - 1, cols);
        
        % Extract the current block from the grayscale image
        block_gray = img_gray(r:r_end, c:c_end);
        
        % Compute the average intensity of the block
        I_block = mean(block_gray(:));
        
        % Calculate the stress values using the provided formula
        stress_diff = (f_sigma / (pi * h)) * (asin(sqrt(I_block / I0)));
        
        % Estimate sigma1 and sigma2 (assuming sigma1 > sigma2)
        sigma1_est(r, c) = stress_diff / 2;
        sigma2_est(r, c) = -stress_diff / 2;
    end
end

% Determine the maximum intensity value in the grayscale image
I_max = max(img_gray(:));

% Display the maximum intensity value
disp(['Maximum intensity value (I_max) measured from the image: ', num2str(I_max)]);

% Define stress range for color mapping
min_stress = 0; % Set minimum stress value to 0
max_stress = max(sigma1_est(:)); % Maximum stress value

% Display the original image
figure;
imshow(img);
hold on;

% Display color-coded blocks based on estimated stresses
for r = 1:block_size:rows
    for c = 1:block_size:cols
        % Calculate stress values for the current block
        stress_sigma1 = sigma1_est(r, c);
        stress_sigma2 = sigma2_est(r, c);
        
        % Map stress values to colormap index (jet colormap)
        color_val = (stress_sigma1 - min_stress) / (max_stress - min_stress); % Normalize to [0, 1]
        color_index = round(color_val * 255) + 1; % Map to colormap index
        
        % Get RGB color from jet colormap based on color_index
        colormap_jet = jet(256);
        block_color = colormap_jet(color_index, :);
        
        % Define block coordinates
        block_coords = [c, r, block_size, block_size];
        
        % Draw colored rectangle (block) on the image
        rectangle('Position', block_coords, 'FaceColor', block_color, 'EdgeColor', 'none');
    end
end

% Create main color scale legend (colorbar)
colormap(gca, jet); % Use jet colormap for stress visualization
colorbar; % Display main colorbar

% Customize colorbar ticks and labels
caxis([min_stress, max_stress]); % Set colorbar limits to range from 0 to max stress
colorbar_ticks = linspace(min_stress, max_stress, 5); % Define custom ticks
colorbar_tick_labels = arrayfun(@(x) sprintf('%.2f', x), colorbar_ticks, 'UniformOutput', false); % Create tick labels
colorbar('YTick', colorbar_ticks, 'YTickLabel', colorbar_tick_labels); % Set custom ticks and labels

hold off;
title('Original Image with Color-Coded Principal Stresses');
